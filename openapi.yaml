openapi: 3.0.3
info:
  title: Scaleup AI - Xero Routes (subset)
  version: "1.0.0"
  description: Minimal OpenAPI spec for the Xero integration endpoints used by a React login flow.

servers:
  - url: http://service.scaleupai.tech/
    description: Local dev (default port used by src/index.ts)

paths:
  /api/v1/xero/creds:
    get:
      summary: Set Xero credentials (query parameters; no POST body)
      description: |
        Accepts clientId, clientSecret and redirectUri via query string and initializes
        the in-memory Xero client. Intended for dev/test usage only (or use env vars).
      parameters:
        - name: clientId
          in: query
          required: true
          schema:
            type: string
        - name: clientSecret
          in: query
          required: true
          schema:
            type: string
        - name: redirectUri
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Credentials set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          description: Missing or invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing Xero credentials. Provide via query parameters or set TEST_XERO_CLIENT_ID/TEST_XERO_CLIENT_SECRET/XERO_REDIRECT_URI in env."

  /api/v1/xero/auth:
    get:
      summary: Start Xero OAuth2 login (redirect to consent)
      description: |
        Initiates OAuth2 consent flow. If credentials are not initialized this route
        will attempt to bootstrap from test env vars; otherwise returns 400.

        Note to frontend implementers:
          - Xero will redirect the user's browser to the public redirect URL
            configured for the app: https://scaleupai.tech/xero/oauth2/redirect
            with query parameters such as 'code' and 'state' after consent.
          - The frontend should capture that redirect, extract 'code' and 'state',
            then call the backend service endpoint (example host in this spec:
            http://service.scaleupai.tech/api/v1/xero/oauth2/redirect) with the
            same query parameters so the backend can complete the token exchange.
          - In short: the browser redirect lands on the public redirect URL, the
            frontend processes the returned query parameters, and then notifies
            the backend to finish the OAuth flow (exchange code for tokens).
      responses:
        "302":
          description: Redirect to Xero consent URL
          headers:
            Location:
              description: Xero consent URL
              schema:
                type: string
        "400":
          description: Missing credentials
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Server/OAuth error
          content:
            text/html:
              schema:
                type: string

  /api/v1/xero/oauth2/redirect:
    get:
      summary: OAuth2 callback endpoint
      description: |
        Callback endpoint Xero redirects to after user consent. Handles code/state
        and continues auth flow.

        Frontend guidance:
          - When Xero redirects the browser it will use the public redirect URL
            (https://scaleupai.tech/xero/oauth2/redirect) and include 'code' and
            'state' in the query string.
          - The frontend should extract those values from the browser URL and
            invoke the backend callback handler (GET /api/v1/xero/oauth2/redirect
            on the backend host) with the same query parameters so the server can
            exchange the code for tokens and persist them as appropriate.
          - The backend may respond with HTML, a redirect, or JSON; the frontend
            is responsible for handling the browser UX after it calls the backend.
      parameters:
        - name: code
          in: query
          required: false
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Callback handled (HTML or redirect)
          content:
            text/html:
              schema:
                type: string
        "400":
          description: Credentials not set or invalid callback
          content:
            text/plain:
              schema:
                type: string

  /api/v1/xero/integration:
    get:
      summary: Integration status UI
      description: Renders an integration status page (EJS view). Requires initialized Xero controller.
      responses:
        "200":
          description: HTML status page
          content:
            text/html:
              schema:
                type: string
        "400":
          description: Credentials not set
          content:
            text/plain:
              schema:
                type: string

  # Receivables Autopilot - Receivable-related endpoints added for demo/testing

  /api/v1/xero/token:
    post:
      summary: Persist a Xero token set
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                tenantId:
                  type: string
                tokenSet:
                  type: object
                  properties:
                    refresh_token:
                      type: string
                    access_token:
                      type: string
                    expires_at:
                      type: string
                    scope:
                      oneOf:
                        - type: string
                        - type: array
                          items:
                            type: string
      responses:
        "204":
          description: Persisted
        "400":
          description: Bad request

  /api/v1/xero/token/{clientId}/{tenantId}:
    get:
      summary: Fetch persisted Xero token for client and tenant
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Token found
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Not found

  /api/v1/email-copywriter/draft:
    post:
      summary: Generate an email draft for an invoice reminder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                invoiceId:
                  type: string
                amount:
                  type: number
                dueDate:
                  type: string
                stage:
                  type: string
                customerName:
                  type: string
      responses:
        "200":
          description: Draft generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  subject:
                    type: string
                  bodyText:
                    type: string
                  bodyHtml:
                    type: string

  /api/v1/collections/start:
    post:
      summary: Start the Collections Reminder background scanner
      responses:
        "204":
          description: Started

  /api/v1/collections/stop:
    post:
      summary: Stop the Collections Reminder background scanner
      responses:
        "204":
          description: Stopped

  /api/v1/collections/scan:
    post:
      summary: Trigger a one-off collections scan (on-demand)
      responses:
        "202":
          description: Scan triggered

  /api/v1/collections/scheduled:
    get:
      summary: List persisted REMINDER.SCHEDULED events
      responses:
        "200":
          description: Array of scheduled reminders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /api/v1/payment-reconciliation/payments/reconcile:
    post:
      summary: Attempt to reconcile an incoming payment to an invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentId:
                  type: string
                amount:
                  type: number
                reference:
                  type: string
      responses:
        "200":
          description: Reconciliation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  matched:
                    type: boolean
                  invoiceId:
                    type: string

components: {}
